{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "_uuid": "1842eb5ed544b0e33a2a137c56d44d4e65e9f829"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import LabelEncoder,MinMaxScaler, StandardScaler\n",
    "from sklearn.model_selection import train_test_split, ParameterGrid\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, mean_squared_error, log_loss\n",
    "import operator\n",
    "import json\n",
    "from IPython import display\n",
    "import os\n",
    "import warnings\n",
    "\n",
    "np.random.seed(0)\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "THRESHOLD = 4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "207339999fa4ee9ce41f87d50900ffac584502d9"
   },
   "source": [
    "Task: To predict whether the user likes the mobile phone or not. <br>\n",
    "Assumption: If the average rating of mobile >= threshold, then the user likes it, otherwise not."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "a2b4869adc2b0dc0fcc0c5d996a274bb93902dc8"
   },
   "source": [
    "<b>Missing values:</b><br>\n",
    "'Also Known As'(459),'Applications'(421),'Audio Features'(437),'Bezel-less display'(266),'Browser'(449),'Build Material'(338),'Co-Processor'(451),'Display Colour'(457),'Mobile High-Definition Link(MHL)'(472),'Music'(447)\n",
    "'Email','Fingerprint Sensor Position'(174),'Games'(446),'HDMI'(454),'Heart Rate Monitor'(467),'IRIS Scanner'(467),\n",
    "'Optical Image Stabilisation'(219),'Other Facilities'(444),'Phone Book'(444),'Physical Aperture'(87),'Quick Charging'(122),'Ring Tone'(444),'Ruggedness'(430),SAR Value(315),'SIM 3'(472),'SMS'(470)', 'Screen Protection'(229),'Screen to Body Ratio (claimed by the brand)'(428),'Sensor'(242),'Software Based Aperture'(473),\n",
    "'Special Features'(459),'Standby time'(334),'Stylus'(473),'TalkTime'(259), 'USB Type-C'(374),'Video Player'(456),\n",
    "'Video Recording Features'(458),'Waterproof'(398),'Wireless Charging','USB OTG Support'(159), 'Video ,'Recording'(113),'Java'(471),'Browser'(448)\n",
    "\n",
    "<b>Very low variance:</b><br>\n",
    "'Architecture'(most entries are 64-bit),'Audio Jack','GPS','Loudspeaker','Network','Network Support','Other Sensors'(28),'SIM Size', 'VoLTE'\n",
    "\n",
    "\n",
    "<b>Multivalued:</b><br>\n",
    "'Colours','Custom UI','Model'(1),'Other Sensors','Launch Date'\n",
    "\n",
    "<b>Not important:</b><br>\n",
    "'Bluetooth', 'Settings'(75),'Wi-Fi','Wi-Fi Features'\n",
    "\n",
    "<b>Doubtful:</b><br>\n",
    "'Aspect Ratio','Autofocus','Brand','Camera Features','Fingerprint Sensor'(very few entries are missing),\n",
    "'Fingerprint Sensor Position', 'Graphics'(multivalued),'Image resolution'(multivalued),'SIM Size','Sim Slot(s)', 'User Available Storage', 'SIM 1', 'SIM 2','Shooting Modes', 'Touch Screen'(24), 'USB Connectivity'\n",
    "    \n",
    "<b>To check:</b><br>\n",
    "'Display Type','Expandable Memory','FM Radio'\n",
    "\n",
    "<b>High Correlation with other features</b><br>\n",
    "'SIM Slot(s)' high correlation with SIM1\n",
    "'Weight' has high high correlation with capacity , screen-to-body ratio\n",
    "'Height' - screen size is also there\n",
    "    \n",
    "<b>Given a mobile, we can't directly get these features</b><br>\n",
    "'Rating Count', 'Review Count'\n",
    "\n",
    "<b>Keeping:</b><br>\n",
    "'Capacity','Flash'(17),'Height'(22),'Internal Memory'(20, require cleaning),'Operating System'(25, require cleaning), 'Pixel Density'(1, clean it),'Processor'(22, clean it), 'RAM'(17, clean), 'Rating','Resolution'(cleaning), 'Screen Resolution','Screen Size', 'Thickness'(22), 'Type','User Replaceable','Weight'(cleaning),'Sim Size'(), 'Other Sensors'(28), 'Screen to Body Ratio (calculated)','Width',\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "_uuid": "b598b1b458c188b9bcbbed9544ec7166845f2fae"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of data points in train: 355\n",
      "Number of features in train: 99\n",
      "Number of data points in test: 119\n",
      "Number of features in test: 98\n"
     ]
    }
   ],
   "source": [
    "# read data from file\n",
    "train = pd.read_csv(\"../input/train.csv\") \n",
    "test = pd.read_csv(\"../input/test.csv\")\n",
    "\n",
    "# check the number of features and data points in train\n",
    "print(\"Number of data points in train: %d\" % train.shape[0])\n",
    "print(\"Number of features in train: %d\" % train.shape[1])\n",
    "\n",
    "# check the number of features and data points in test\n",
    "print(\"Number of data points in test: %d\" % test.shape[0])\n",
    "print(\"Number of features in test: %d\" % test.shape[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "_uuid": "e3e15a4b6958b34170ea3b185af78329f64fd633"
   },
   "outputs": [],
   "source": [
    "def data_clean(data):\n",
    "    \n",
    "    # Let's first remove all missing value features\n",
    "    columns_to_remove = ['Also Known As','Applications','Audio Features','Bezel-less display'\n",
    "                         'Browser','Build Material','Co-Processor','Browser'\n",
    "                         'Display Colour','Mobile High-Definition Link(MHL)',\n",
    "                         'Music', 'Email','Fingerprint Sensor Position',\n",
    "                         'Games','HDMI','Heart Rate Monitor','IRIS Scanner', \n",
    "                         'Optical Image Stabilisation','Other Facilities',\n",
    "                         'Phone Book','Physical Aperture','Quick Charging',\n",
    "                         'Ring Tone','Ruggedness','SAR Value','SIM 3','SMS',\n",
    "                         'Screen Protection','Screen to Body Ratio (claimed by the brand)',\n",
    "                         'Sensor','Software Based Aperture', 'Special Features',\n",
    "                         'Standby time','Stylus','TalkTime', 'USB Type-C',\n",
    "                         'Video Player', 'Video Recording Features','Waterproof',\n",
    "                         'Wireless Charging','USB OTG Support', 'Video Recording','Java']\n",
    "\n",
    "    columns_to_retain = list(set(data.columns)-set(columns_to_remove))\n",
    "    data = data[columns_to_retain]\n",
    "\n",
    "    #Features having very low variance \n",
    "    columns_to_remove = ['Architecture','Audio Jack','GPS','Loudspeaker','Network','Network Support','VoLTE']\n",
    "    columns_to_retain = list(set(data.columns)-set(columns_to_remove))\n",
    "    data = data[columns_to_retain]\n",
    "\n",
    "    # Multivalued:\n",
    "    columns_to_remove = ['Architecture','Launch Date','Audio Jack','GPS','Loudspeaker','Network','Network Support','VoLTE', 'Custom UI']\n",
    "    columns_to_retain = list(set(data.columns)-set(columns_to_remove))\n",
    "    data = data[columns_to_retain]\n",
    "\n",
    "    # Not much important\n",
    "    columns_to_remove = ['Bluetooth', 'Settings','Wi-Fi','Wi-Fi Features']\n",
    "    columns_to_retain = list(set(data.columns)-set(columns_to_remove))\n",
    "    data = data[columns_to_retain]\n",
    "    \n",
    "    return data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "d3e1753f7b33dcd43f348177051bdacd9c1d63b9"
   },
   "source": [
    "# Removing features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "_uuid": "af21d20d67368de9c5a492e86880e9ba7dbc1d00"
   },
   "outputs": [],
   "source": [
    "train = data_clean(train)\n",
    "test = data_clean(test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "9d95bf0adae6b26ffb4d7e558e5ad40228f7f102"
   },
   "source": [
    "removing all those data points in which more than 15 features are missing "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "_uuid": "6cf6777d39926889245a5b343aa6441db60dd807"
   },
   "outputs": [],
   "source": [
    "train = train[(train.isnull().sum(axis=1) <= 15)]\n",
    "# You shouldn't remove data points from test set\n",
    "#test = test[(test.isnull().sum(axis=1) <= 15)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "_uuid": "fea27ecd8cc1f1b28465c96b2eae8dadf796ca48"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of data points in train: 341\n",
      "Number of features in train: 47\n",
      "Number of data points in test: 119\n",
      "Number of features in test: 46\n"
     ]
    }
   ],
   "source": [
    "# check the number of features and data points in train\n",
    "print(\"Number of data points in train: %d\" % train.shape[0])\n",
    "print(\"Number of features in train: %d\" % train.shape[1])\n",
    "\n",
    "# check the number of features and data points in test\n",
    "print(\"Number of data points in test: %d\" % test.shape[0])\n",
    "print(\"Number of features in test: %d\" % test.shape[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "cb15bf9f4083350947bcb0c4ed619610ff31531e"
   },
   "source": [
    "# Filling Missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "_uuid": "f1f5bf569136ea43b49315daacb6ca9651b4e39b"
   },
   "outputs": [],
   "source": [
    "def for_integer(test):\n",
    "    try:\n",
    "        test = test.strip()\n",
    "        return int(test.split(' ')[0])\n",
    "    except IOError:\n",
    "           pass\n",
    "    except ValueError:\n",
    "        pass\n",
    "    except:\n",
    "        pass\n",
    "\n",
    "def for_string(test):\n",
    "    try:\n",
    "        test = test.strip()\n",
    "        return (test.split(' ')[0])\n",
    "    except IOError:\n",
    "        pass\n",
    "    except ValueError:\n",
    "        pass\n",
    "    except:\n",
    "        pass\n",
    "\n",
    "def for_float(test):\n",
    "    try:\n",
    "        test = test.strip()\n",
    "        return float(test.split(' ')[0])\n",
    "    except IOError:\n",
    "        pass\n",
    "    except ValueError:\n",
    "        pass\n",
    "    except:\n",
    "        pass\n",
    "def find_freq(test):\n",
    "    try:\n",
    "        test = test.strip()\n",
    "        test = test.split(' ')\n",
    "        if test[2][0] == '(':\n",
    "            return float(test[2][1:])\n",
    "        return float(test[2])\n",
    "    except IOError:\n",
    "        pass\n",
    "    except ValueError:\n",
    "        pass\n",
    "    except:\n",
    "        pass\n",
    "\n",
    "    \n",
    "def for_Internal_Memory(test):\n",
    "    try:\n",
    "        test = test.strip()\n",
    "        test = test.split(' ')\n",
    "        if test[1] == 'GB':\n",
    "            return int(test[0])\n",
    "        if test[1] == 'MB':\n",
    "#             print(\"here\")\n",
    "            return (int(test[0]) * 0.001)\n",
    "    except IOError:\n",
    "           pass\n",
    "    except ValueError:\n",
    "        pass\n",
    "    except:\n",
    "        pass\n",
    "    \n",
    "def find_freq(test):\n",
    "    try:\n",
    "        test = test.strip()\n",
    "        test = test.split(' ')\n",
    "        if test[2][0] == '(':\n",
    "            return float(test[2][1:])\n",
    "        return float(test[2])\n",
    "    except IOError:\n",
    "        pass\n",
    "    except ValueError:\n",
    "        pass\n",
    "    except:\n",
    "        pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "_uuid": "a12f9c760caf6f85b11d0153e3b67681efe194b2"
   },
   "outputs": [],
   "source": [
    "def data_clean_2(x):\n",
    "    data = x.copy()\n",
    "    \n",
    "    data['Capacity'] = data['Capacity'].apply(for_integer)\n",
    "\n",
    "    data['Height'] = data['Height'].apply(for_float)\n",
    "    data['Height'] = data['Height'].fillna(data['Height'].mean())\n",
    "\n",
    "    data['Internal Memory'] = data['Internal Memory'].apply(for_Internal_Memory)\n",
    "\n",
    "    data['Pixel Density'] = data['Pixel Density'].apply(for_integer)\n",
    "\n",
    "    data['Internal Memory'] = data['Internal Memory'].fillna(data['Internal Memory'].median())\n",
    "    data['Internal Memory'] = data['Internal Memory'].astype(int)\n",
    "\n",
    "    data['RAM'] = data['RAM'].apply(for_integer)\n",
    "    data['RAM'] = data['RAM'].fillna(data['RAM'].median())\n",
    "    data['RAM'] = data['RAM'].astype(int)\n",
    "\n",
    "    data['Resolution'] = data['Resolution'].apply(for_integer)\n",
    "    data['Resolution'] = data['Resolution'].fillna(data['Resolution'].median())\n",
    "    data['Resolution'] = data['Resolution'].astype(int)\n",
    "\n",
    "    data['Screen Size'] = data['Screen Size'].apply(for_float)\n",
    "\n",
    "    data['Thickness'] = data['Thickness'].apply(for_float)\n",
    "    data['Thickness'] = data['Thickness'].fillna(data['Thickness'].mean())\n",
    "    data['Thickness'] = data['Thickness'].round(2)\n",
    "\n",
    "    data['Type'] = data['Type'].fillna('Li-Polymer')\n",
    "\n",
    "    data['Screen to Body Ratio (calculated)'] = data['Screen to Body Ratio (calculated)'].apply(for_float)\n",
    "    data['Screen to Body Ratio (calculated)'] = data['Screen to Body Ratio (calculated)'].fillna(data['Screen to Body Ratio (calculated)'].mean())\n",
    "    data['Screen to Body Ratio (calculated)'] = data['Screen to Body Ratio (calculated)'].round(2)\n",
    "\n",
    "    data['Width'] = data['Width'].apply(for_float)\n",
    "    data['Width'] = data['Width'].fillna(data['Width'].mean())\n",
    "    data['Width'] = data['Width'].round(2)\n",
    "\n",
    "    data['Flash'][data['Flash'].isna() == True] = \"Other\"\n",
    "\n",
    "    data['User Replaceable'][data['User Replaceable'].isna() == True] = \"Other\"\n",
    "\n",
    "    data['Num_cores'] = data['Processor'].apply(for_string)\n",
    "    data['Num_cores'][data['Num_cores'].isna() == True] = \"Other\"\n",
    "\n",
    "\n",
    "    data['Processor_frequency'] = data['Processor'].apply(find_freq)\n",
    "    #because there is one entry with 208MHz values, to convert it to GHz\n",
    "    data['Processor_frequency'][data['Processor_frequency'] > 200] = 0.208\n",
    "    data['Processor_frequency'] = data['Processor_frequency'].fillna(data['Processor_frequency'].mean())\n",
    "    data['Processor_frequency'] = data['Processor_frequency'].round(2)\n",
    "\n",
    "    data['Camera Features'][data['Camera Features'].isna() == True] = \"Other\"\n",
    "\n",
    "    #simplifyig Operating System to os_name for simplicity\n",
    "    data['os_name'] = data['Operating System'].apply(for_string)\n",
    "    data['os_name'][data['os_name'].isna() == True] = \"Other\"\n",
    "\n",
    "    data['Sim1'] = data['SIM 1'].apply(for_string)\n",
    "\n",
    "    data['SIM Size'][data['SIM Size'].isna() == True] = \"Other\"\n",
    "\n",
    "    data['Image Resolution'][data['Image Resolution'].isna() == True] = \"Other\"\n",
    "\n",
    "    data['Fingerprint Sensor'][data['Fingerprint Sensor'].isna() == True] = \"Other\"\n",
    "\n",
    "    data['Expandable Memory'][data['Expandable Memory'].isna() == True] = \"No\"\n",
    "\n",
    "    data['Weight'] = data['Weight'].apply(for_integer)\n",
    "    data['Weight'] = data['Weight'].fillna(data['Weight'].mean())\n",
    "    data['Weight'] = data['Weight'].astype(int)\n",
    "\n",
    "    data['SIM 2'] = data['SIM 2'].apply(for_string)\n",
    "    data['SIM 2'][data['SIM 2'].isna() == True] = \"Other\"\n",
    "    \n",
    "    return data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "_uuid": "b97b526147a23a9ebf69747714ad75ddac606585"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of data points in train: 341\n",
      "Number of features in train: 51\n",
      "Number of data points in test: 119\n",
      "Number of features in test: 50\n"
     ]
    }
   ],
   "source": [
    "train = data_clean_2(train)\n",
    "test = data_clean_2(test)\n",
    "\n",
    "# check the number of features and data points in train\n",
    "print(\"Number of data points in train: %d\" % train.shape[0])\n",
    "print(\"Number of features in train: %d\" % train.shape[1])\n",
    "\n",
    "# check the number of features and data points in test\n",
    "print(\"Number of data points in test: %d\" % test.shape[0])\n",
    "print(\"Number of features in test: %d\" % test.shape[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "38c102338fdd3ff9f814888ef3d9cc40c7ecc439"
   },
   "source": [
    "Not very important feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "_uuid": "904ecdd11683fcf435a0caae63241a4c72ece3e6"
   },
   "outputs": [],
   "source": [
    "def data_clean_3(x):\n",
    "    \n",
    "    data = x.copy()\n",
    "\n",
    "    columns_to_remove = ['User Available Storage','SIM Size','Chipset','Processor','Autofocus','Aspect Ratio','Touch Screen',\n",
    "                        'Bezel-less display','Operating System','SIM 1','USB Connectivity','Other Sensors','Graphics','FM Radio',\n",
    "                        'NFC','Shooting Modes','Browser','Display Colour' ]\n",
    "\n",
    "    columns_to_retain = list(set(data.columns)-set(columns_to_remove))\n",
    "    data = data[columns_to_retain]\n",
    "\n",
    "\n",
    "    columns_to_remove = [ 'Screen Resolution','User Replaceable','Camera Features',\n",
    "                        'Thickness', 'Display Type']\n",
    "\n",
    "    columns_to_retain = list(set(data.columns)-set(columns_to_remove))\n",
    "    data = data[columns_to_retain]\n",
    "\n",
    "\n",
    "    columns_to_remove = ['Fingerprint Sensor', 'Flash', 'Rating Count', 'Review Count','Image Resolution','Type','Expandable Memory',\\\n",
    "                        'Colours','Width','Model']\n",
    "    columns_to_retain = list(set(data.columns)-set(columns_to_remove))\n",
    "    data = data[columns_to_retain]\n",
    "\n",
    "    return data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "_uuid": "d314608ce034e9893d0f77dc1c352c37c93f3a9a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of data points in train: 341\n",
      "Number of features in train: 18\n",
      "Number of data points in test: 119\n",
      "Number of features in test: 17\n"
     ]
    }
   ],
   "source": [
    "train = data_clean_3(train)\n",
    "test = data_clean_3(test)\n",
    "\n",
    "# check the number of features and data points in train\n",
    "print(\"Number of data points in train: %d\" % train.shape[0])\n",
    "print(\"Number of features in train: %d\" % train.shape[1])\n",
    "\n",
    "# check the number of features and data points in test\n",
    "print(\"Number of data points in test: %d\" % test.shape[0])\n",
    "print(\"Number of features in test: %d\" % test.shape[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "_uuid": "8089ffe01397fe220daa61acf9f2f07be3c986b1"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(460, 17)\n",
      "Index(['PhoneId', 'Num_cores', 'Resolution', 'Sim1', 'RAM',\n",
      "       'Processor_frequency', 'Height', 'SIM Slot(s)',\n",
      "       'Screen to Body Ratio (calculated)', 'SIM 2', 'Weight', 'Capacity',\n",
      "       'Screen Size', 'os_name', 'Internal Memory', 'Pixel Density', 'Brand'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# one hot encoding\n",
    "\n",
    "train_ids = train['PhoneId']\n",
    "test_ids = test['PhoneId']\n",
    "\n",
    "cols = list(test.columns)\n",
    "cols.remove('PhoneId')\n",
    "cols.insert(0, 'PhoneId')\n",
    "\n",
    "combined = pd.concat([train.drop('Rating', axis=1)[cols], test[cols]])\n",
    "print(combined.shape)\n",
    "print(combined.columns)\n",
    "\n",
    "#combined = pd.get_dummies(combined)\n",
    "#print(combined.shape)\n",
    "#print(combined.columns)\n",
    "\n",
    "train_new = combined[combined['PhoneId'].isin(train_ids)]\n",
    "test_new = combined[combined['PhoneId'].isin(test_ids)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "_uuid": "3d60c09178ae8ab4546c170ef73618b73703c8b9"
   },
   "outputs": [],
   "source": [
    "train_new = train_new.merge(train[['PhoneId', 'Rating']], on='PhoneId')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "_uuid": "f2e4696dee62afa65b083128c97b4833e434178e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of data points in train: 341\n",
      "Number of features in train: 18\n",
      "Number of data points in test: 119\n",
      "Number of features in test: 17\n"
     ]
    }
   ],
   "source": [
    "# check the number of features and data points in train\n",
    "print(\"Number of data points in train: %d\" % train_new.shape[0])\n",
    "print(\"Number of features in train: %d\" % train_new.shape[1])\n",
    "\n",
    "# check the number of features and data points in test\n",
    "print(\"Number of data points in test: %d\" % test_new.shape[0])\n",
    "print(\"Number of features in test: %d\" % test_new.shape[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "_uuid": "9bce92c76924db590187918225e9affab267bf4b"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PhoneId</th>\n",
       "      <th>Num_cores</th>\n",
       "      <th>Resolution</th>\n",
       "      <th>Sim1</th>\n",
       "      <th>RAM</th>\n",
       "      <th>Processor_frequency</th>\n",
       "      <th>Height</th>\n",
       "      <th>SIM Slot(s)</th>\n",
       "      <th>Screen to Body Ratio (calculated)</th>\n",
       "      <th>SIM 2</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Capacity</th>\n",
       "      <th>Screen Size</th>\n",
       "      <th>os_name</th>\n",
       "      <th>Internal Memory</th>\n",
       "      <th>Pixel Density</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Octa</td>\n",
       "      <td>20</td>\n",
       "      <td>4G</td>\n",
       "      <td>4</td>\n",
       "      <td>1.8</td>\n",
       "      <td>157.9</td>\n",
       "      <td>Dual SIM, GSM+GSM, Dual VoLTE</td>\n",
       "      <td>80.68</td>\n",
       "      <td>4G</td>\n",
       "      <td>182</td>\n",
       "      <td>4000</td>\n",
       "      <td>6.26</td>\n",
       "      <td>Android</td>\n",
       "      <td>64</td>\n",
       "      <td>403</td>\n",
       "      <td>Xiaomi</td>\n",
       "      <td>4.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Octa</td>\n",
       "      <td>8</td>\n",
       "      <td>4G</td>\n",
       "      <td>3</td>\n",
       "      <td>1.8</td>\n",
       "      <td>156.2</td>\n",
       "      <td>Dual SIM, GSM+GSM, Dual VoLTE</td>\n",
       "      <td>80.85</td>\n",
       "      <td>4G</td>\n",
       "      <td>168</td>\n",
       "      <td>4230</td>\n",
       "      <td>6.20</td>\n",
       "      <td>Android</td>\n",
       "      <td>32</td>\n",
       "      <td>271</td>\n",
       "      <td>Realme</td>\n",
       "      <td>4.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Octa</td>\n",
       "      <td>25</td>\n",
       "      <td>4G</td>\n",
       "      <td>3</td>\n",
       "      <td>2.1</td>\n",
       "      <td>157.0</td>\n",
       "      <td>Dual SIM, GSM+GSM, Dual VoLTE</td>\n",
       "      <td>83.68</td>\n",
       "      <td>4G</td>\n",
       "      <td>168</td>\n",
       "      <td>3500</td>\n",
       "      <td>6.30</td>\n",
       "      <td>Android</td>\n",
       "      <td>32</td>\n",
       "      <td>409</td>\n",
       "      <td>Realme</td>\n",
       "      <td>4.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Octa</td>\n",
       "      <td>24</td>\n",
       "      <td>4G</td>\n",
       "      <td>4</td>\n",
       "      <td>2.2</td>\n",
       "      <td>159.8</td>\n",
       "      <td>Dual SIM, GSM+GSM</td>\n",
       "      <td>74.78</td>\n",
       "      <td>4G</td>\n",
       "      <td>169</td>\n",
       "      <td>3300</td>\n",
       "      <td>6.00</td>\n",
       "      <td>Android</td>\n",
       "      <td>64</td>\n",
       "      <td>411</td>\n",
       "      <td>Samsung</td>\n",
       "      <td>4.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Octa</td>\n",
       "      <td>16</td>\n",
       "      <td>4G</td>\n",
       "      <td>4</td>\n",
       "      <td>2.2</td>\n",
       "      <td>160.4</td>\n",
       "      <td>Dual SIM, GSM+GSM, Dual VoLTE</td>\n",
       "      <td>84.23</td>\n",
       "      <td>4G</td>\n",
       "      <td>175</td>\n",
       "      <td>3750</td>\n",
       "      <td>6.50</td>\n",
       "      <td>Android</td>\n",
       "      <td>64</td>\n",
       "      <td>396</td>\n",
       "      <td>Honor</td>\n",
       "      <td>4.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PhoneId Num_cores  Resolution   ...   Pixel Density    Brand  Rating\n",
       "0        0      Octa          20   ...             403   Xiaomi     4.5\n",
       "1        1      Octa           8   ...             271   Realme     4.5\n",
       "2        2      Octa          25   ...             409   Realme     4.4\n",
       "3        4      Octa          24   ...             411  Samsung     4.3\n",
       "4        5      Octa          16   ...             396    Honor     4.4\n",
       "\n",
       "[5 rows x 18 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_new.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "_uuid": "3a571536f3ccfd23da41e43641c6739316b33f65"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PhoneId</th>\n",
       "      <th>Num_cores</th>\n",
       "      <th>Resolution</th>\n",
       "      <th>Sim1</th>\n",
       "      <th>RAM</th>\n",
       "      <th>Processor_frequency</th>\n",
       "      <th>Height</th>\n",
       "      <th>SIM Slot(s)</th>\n",
       "      <th>Screen to Body Ratio (calculated)</th>\n",
       "      <th>SIM 2</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Capacity</th>\n",
       "      <th>Screen Size</th>\n",
       "      <th>os_name</th>\n",
       "      <th>Internal Memory</th>\n",
       "      <th>Pixel Density</th>\n",
       "      <th>Brand</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>Octa</td>\n",
       "      <td>5</td>\n",
       "      <td>4G</td>\n",
       "      <td>2</td>\n",
       "      <td>1.8</td>\n",
       "      <td>156.2</td>\n",
       "      <td>Dual SIM, GSM+GSM, Dual VoLTE</td>\n",
       "      <td>80.85</td>\n",
       "      <td>4G</td>\n",
       "      <td>168</td>\n",
       "      <td>4230</td>\n",
       "      <td>6.20</td>\n",
       "      <td>Android</td>\n",
       "      <td>16</td>\n",
       "      <td>271</td>\n",
       "      <td>Realme</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>11</td>\n",
       "      <td>Octa</td>\n",
       "      <td>12</td>\n",
       "      <td>4G</td>\n",
       "      <td>4</td>\n",
       "      <td>1.8</td>\n",
       "      <td>156.0</td>\n",
       "      <td>Dual SIM, GSM+GSM, Dual VoLTE</td>\n",
       "      <td>81.60</td>\n",
       "      <td>4G</td>\n",
       "      <td>205</td>\n",
       "      <td>5000</td>\n",
       "      <td>6.20</td>\n",
       "      <td>Android</td>\n",
       "      <td>64</td>\n",
       "      <td>402</td>\n",
       "      <td>Motorola</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>13</td>\n",
       "      <td>Octa</td>\n",
       "      <td>25</td>\n",
       "      <td>4G</td>\n",
       "      <td>6</td>\n",
       "      <td>2.0</td>\n",
       "      <td>156.7</td>\n",
       "      <td>Dual SIM, GSM+GSM, Dual VoLTE</td>\n",
       "      <td>83.84</td>\n",
       "      <td>4G</td>\n",
       "      <td>169</td>\n",
       "      <td>3500</td>\n",
       "      <td>6.30</td>\n",
       "      <td>Android</td>\n",
       "      <td>64</td>\n",
       "      <td>409</td>\n",
       "      <td>OPPO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>16</td>\n",
       "      <td>Octa</td>\n",
       "      <td>16</td>\n",
       "      <td>4G</td>\n",
       "      <td>4</td>\n",
       "      <td>2.0</td>\n",
       "      <td>156.7</td>\n",
       "      <td>Dual SIM, GSM+GSM, Dual VoLTE</td>\n",
       "      <td>83.84</td>\n",
       "      <td>4G</td>\n",
       "      <td>169</td>\n",
       "      <td>3500</td>\n",
       "      <td>6.30</td>\n",
       "      <td>Android</td>\n",
       "      <td>64</td>\n",
       "      <td>409</td>\n",
       "      <td>OPPO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>19</td>\n",
       "      <td>Octa</td>\n",
       "      <td>20</td>\n",
       "      <td>4G</td>\n",
       "      <td>4</td>\n",
       "      <td>1.8</td>\n",
       "      <td>158.6</td>\n",
       "      <td>Dual SIM, GSM+GSM, Dual VoLTE</td>\n",
       "      <td>77.43</td>\n",
       "      <td>4G</td>\n",
       "      <td>181</td>\n",
       "      <td>4000</td>\n",
       "      <td>5.99</td>\n",
       "      <td>Android</td>\n",
       "      <td>64</td>\n",
       "      <td>403</td>\n",
       "      <td>Xiaomi</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PhoneId Num_cores    ...     Pixel Density     Brand\n",
       "0        3      Octa    ...               271    Realme\n",
       "1       11      Octa    ...               402  Motorola\n",
       "2       13      Octa    ...               409      OPPO\n",
       "3       16      Octa    ...               409      OPPO\n",
       "4       19      Octa    ...               403    Xiaomi\n",
       "\n",
       "[5 rows x 17 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_new.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "b4358789633dbaac41fc53b9a279c1ea4b6c5428"
   },
   "source": [
    "## Dummy Solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "_uuid": "f70949ad64c6245ba18de0fb94903860de9be672"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PhoneId</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PhoneId  Class\n",
       "0        3      0\n",
       "1       11      0\n",
       "2       13      0\n",
       "3       16      0\n",
       "4       19      0"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submission = pd.DataFrame({'PhoneId':test_new['PhoneId'], 'Class':[0]*test_new.shape[0]})\n",
    "submission = submission[['PhoneId', 'Class']]\n",
    "submission.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "_uuid": "47ea945eb9ea4f1d850f65e2f38c9d52f1cf0188"
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'X_train' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-18-c597e1c8b9c4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;31m# create a link to download the dataframe\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m \u001b[0mcreate_download_link\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'X_train' is not defined"
     ]
    }
   ],
   "source": [
    "# import the modules we'll need\n",
    "from IPython.display import HTML\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import base64\n",
    "def create_download_link(df, title = \"Download CSV file\", filename = \"data.csv\"):  \n",
    "    csv = df.to_csv()\n",
    "    b64 = base64.b64encode(csv.encode())\n",
    "    payload = b64.decode()\n",
    "    html = '<a download=\"{filename}\" href=\"data:text/csv;base64,{payload}\" target=\"_blank\">{title}</a>'\n",
    "    html = html.format(payload=payload,title=title,filename=filename)\n",
    "    return HTML(html)\n",
    "\n",
    "# create a random sample dataframe\n",
    "df = pd.DataFrame(np.random.randn(50, 4), columns=list('ABCD'))\n",
    "\n",
    "# create a link to download the dataframe\n",
    "create_download_link(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "_uuid": "6370bfa088fbb2cd83bc6957c56c2433ad6a067b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PhoneId                               231.124183\n",
      "Resolution                              9.450980\n",
      "RAM                                     3.580065\n",
      "Processor_frequency                     1.780817\n",
      "Height                                149.719698\n",
      "Screen to Body Ratio (calculated)      72.188333\n",
      "Weight                                160.771242\n",
      "Capacity                             3180.467320\n",
      "Screen Size                             5.445523\n",
      "Internal Memory                        45.346405\n",
      "Pixel Density                         340.816993\n",
      "Rating                                  4.078431\n",
      "class                                   0.699346\n",
      "dtype: float64 PhoneId                               249.114286\n",
      "Resolution                             10.828571\n",
      "RAM                                     3.971429\n",
      "Processor_frequency                     1.895143\n",
      "Height                                151.928365\n",
      "Screen to Body Ratio (calculated)      73.796000\n",
      "Weight                                166.342857\n",
      "Capacity                             3286.085714\n",
      "Screen Size                             5.609143\n",
      "Internal Memory                        55.314286\n",
      "Pixel Density                         373.885714\n",
      "Rating                                  4.020000\n",
      "class                                   0.685714\n",
      "dtype: float64 PhoneId                               232.970674\n",
      "Resolution                              9.592375\n",
      "RAM                                     3.620235\n",
      "Processor_frequency                     1.792551\n",
      "Height                                149.946394\n",
      "Screen to Body Ratio (calculated)      72.353343\n",
      "Weight                                161.343109\n",
      "Capacity                             3191.307918\n",
      "Screen Size                             5.462317\n",
      "Internal Memory                        46.369501\n",
      "Pixel Density                         344.211144\n",
      "Rating                                  4.072434\n",
      "class                                   0.697947\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#change MB to GB\n",
    "train_new.RAM[train_new.RAM == 512] = 0.5\n",
    "test_new.RAM[test_new.RAM == 512] = 0.5\n",
    "\n",
    "#class feature denoting like/unlike\n",
    "Like_train = train_new['Rating'].map(lambda x: 0 if x < THRESHOLD else 1)\n",
    "train_new['class'] = train_new['Rating'].map(lambda x: 0 if x < THRESHOLD else 1)\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(train_new, Like_train,test_size=0.1, stratify = Like_train)\n",
    "print(X_train.mean(), X_test.mean(),train_new.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "_uuid": "91a5f5d7498c7bd9257d9daf838416e97d6a992f"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "_uuid": "da59fce72c6d8b01f607309abde6996cf8142787"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     PhoneId Num_cores  Resolution  ...       Brand  Rating  class\n",
      "251      348      Quad           7  ...       Apple     4.3      1\n",
      "252      349      Quad           2  ...        Jivi     3.3      0\n",
      "297      412      Quad           8  ...    Micromax     3.4      0\n",
      "300      416      Quad           8  ...       Intex     3.6      0\n",
      "305      422      Quad           8  ...      Lenovo     3.7      0\n",
      "\n",
      "[5 rows x 19 columns]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PhoneId</th>\n",
       "      <th>Num_cores</th>\n",
       "      <th>Sim1</th>\n",
       "      <th>RAM</th>\n",
       "      <th>Processor_frequency</th>\n",
       "      <th>SIM 2</th>\n",
       "      <th>Capacity</th>\n",
       "      <th>Screen Size</th>\n",
       "      <th>os_name</th>\n",
       "      <th>Brand</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>251</th>\n",
       "      <td>348</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>252</th>\n",
       "      <td>349</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>297</th>\n",
       "      <td>412</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>416</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>305</th>\n",
       "      <td>422</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     PhoneId  Num_cores  Sim1  RAM  ...    Capacity  Screen Size  os_name  Brand\n",
       "251      348          0     1    0  ...           0            0        1      1\n",
       "252      349          0     1    0  ...           0            0        0      0\n",
       "297      412          0     1    0  ...           0            0        0      0\n",
       "300      416          0     1    0  ...           1            0        0      0\n",
       "305      422          0     0    0  ...           0            0        0      0\n",
       "\n",
       "[5 rows x 10 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "WRITE YOUR MODELLING CODE HERE\n",
    "\"\"\"\n",
    "import seaborn as sns\n",
    "sns.set()\n",
    "X_binarised_train = X_train[:]\n",
    "print(X_binarised_train.head())\n",
    "\n",
    "X_train.RAM\n",
    "X_binarised_train['RAM'] = X_binarised_train['RAM'].map(lambda x: 0 if x < 6 else 1)\n",
    "\n",
    "X_binarised_train['Screen Size'] = round(X_binarised_train['Screen Size'],0)\n",
    "X_binarised_train['Screen Size'] = X_binarised_train['Screen Size'].map(lambda x: 0 if x < 6 else 1)\n",
    "\n",
    "#sns.scatterplot(train_binarised['Internal Memory'],train_binarised['class'])\n",
    "#train_binarised['Internal Memory'].unique()\n",
    "#train_binarised['Internal Memory'] = train_binarised['Internal Memory'].map(lambda x: 0 if x < 16 else 1)\n",
    "\n",
    "X_binarised_train['Processor_frequency'] = round(X_binarised_train['Processor_frequency'],0)\n",
    "X_binarised_train['Processor_frequency'] = X_binarised_train['Processor_frequency'].map(lambda x: 0 if x < 2 else 1)\n",
    "\n",
    "\n",
    "X_binarised_train['Capacity'].unique()\n",
    "X_binarised_train['Capacity'] = round(X_binarised_train['Capacity'],-3)\n",
    "X_binarised_train['Capacity'] = X_binarised_train['Capacity'].map(lambda x: 0 if x < 3000 else 1)\n",
    "\n",
    "X_binarised_train.Brand[X_binarised_train.Brand == \"Motorola\"] = 'Moto'\n",
    "X_binarised_train.Brand[X_binarised_train.Brand == \"Xiaomi Poco\"] = 'Xiaomi'\n",
    "lst = ['Apple','Samsung','Vivo','OPPO','Xiaomi','Honor','Google','OnePlus']\n",
    "X_binarised_train['Brand'] = X_binarised_train['Brand'].map(lambda val: 1 if any(val in x  for x in lst) else 0)\n",
    "\n",
    "\n",
    "lst = ['Octa', 'Hexa','Tru-Octa']\n",
    "X_binarised_train['Num_cores'] = X_binarised_train['Num_cores'].map(lambda val: 1 if any(val in x  for x in lst) else 0)\n",
    "\n",
    "lst = [ 'iOS']\n",
    "X_binarised_train['os_name'] = X_binarised_train['os_name'].map(lambda val: 1 if any(val in x  for x in lst) else 0)\n",
    "\n",
    "#train_binarised['SIM Slot(s)'].unique()\n",
    "#lst = ['Single SIM, GSM']\n",
    "#train_binarised['SIM Slot(s)'] = train_binarised['SIM Slot(s)'].map(lambda val: 0 if any(val in x  for x in lst) else 1)\n",
    "\n",
    "X_binarised_train['Sim1'].unique()\n",
    "lst = ['4G']\n",
    "X_binarised_train['Sim1'] = X_binarised_train['Sim1'].map(lambda val: 1 if any(val in x  for x in lst) else 0)\n",
    "\n",
    "X_binarised_train['SIM 2'].unique()\n",
    "lst = ['4G','Other']\n",
    "X_binarised_train['SIM 2'] = X_binarised_train['SIM 2'].map(lambda val: 1 if any(val in x  for x in lst) else 0)\n",
    "\n",
    "\n",
    "#X_binarised_train = X_binarised_train.drop(['SIM 2'],axis=1)\n",
    "\n",
    "X_binarised_train = X_binarised_train.drop(['Internal Memory'],axis=1)\n",
    "\n",
    "X_binarised_train = X_binarised_train.drop(['Weight'],axis=1)\n",
    "\n",
    "X_binarised_train = X_binarised_train.drop(['Pixel Density'],axis=1)\n",
    "\n",
    "X_binarised_train = X_binarised_train.drop(['Height'],axis=1)\n",
    "\n",
    "X_binarised_train = X_binarised_train.drop(['Resolution'],axis=1)\n",
    "\n",
    "X_binarised_train = X_binarised_train.drop(['Screen to Body Ratio (calculated)'],axis=1)\n",
    "\n",
    "X_binarised_train = X_binarised_train.drop(['Rating'],axis=1)\n",
    "X_binarised_train = X_binarised_train.drop(['class'],axis=1)\n",
    "X_binarised_train = X_binarised_train.drop(['SIM Slot(s)'],axis=1)\n",
    "\n",
    "X_binarised_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "_uuid": "411daba7f7848569d0c7022d968ef9d4d9ba279b"
   },
   "outputs": [],
   "source": [
    "class MPNeuron:\n",
    "  \n",
    "  def __init__(self):\n",
    "    self.b = None\n",
    "    \n",
    "  def model(self, x):\n",
    "    return(sum(x) >= self.b)\n",
    "  \n",
    "  def predict(self, X):\n",
    "    Y = []\n",
    "    for x in X:\n",
    "      result = self.model(x)\n",
    "      Y.append(result)\n",
    "    return np.array(Y)\n",
    "  \n",
    "  def fit(self, X, Y):\n",
    "    accuracy = {}\n",
    "    \n",
    "    for b in range(X.shape[1] + 1):\n",
    "      self.b = b\n",
    "      Y_pred = self.predict(X)\n",
    "      accuracy[b] = accuracy_score(Y_pred, Y)\n",
    "      \n",
    "    best_b = max(accuracy, key = accuracy.get)\n",
    "    self.b = best_b\n",
    "    \n",
    "    print('Optimal value of b is', best_b)\n",
    "    print('Highest accuracy is', accuracy[best_b])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "_uuid": "9578084551c0c5f71ee3c6db1a58fe92a3658b5f"
   },
   "outputs": [],
   "source": [
    "X_binarised_train = X_binarised_train.loc[:,X_binarised_train.columns != 'PhoneId'].values\n",
    "Y_train = Y_train.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "_uuid": "d7a37e2b1cd8c0c9bd3ef96e0ee3802131846eeb"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "_uuid": "c3a94a4991f77aa4d9a6945fd2d959805bbbc965"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "_uuid": "66f69d0479e3d4951ee914405d286db264209b96"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimal value of b is 3\n",
      "Highest accuracy is 0.7581699346405228\n"
     ]
    }
   ],
   "source": [
    "mp_neuron = MPNeuron()\n",
    "mp_neuron.fit(X_binarised_train, Y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "_uuid": "b0a87c5307e50f993b932ff7d8c3004965b79bed"
   },
   "outputs": [],
   "source": [
    "X_binarised_test = X_test\n",
    "\n",
    "\n",
    "X_binarised_test['RAM'] = X_binarised_test['RAM'].map(lambda x: 0 if x < 6 else 1)\n",
    "\n",
    "X_binarised_test['Screen Size'] = round(X_binarised_test['Screen Size'],0)\n",
    "X_binarised_test['Screen Size'] = X_binarised_test['Screen Size'].map(lambda x: 0 if x < 6 else 1)\n",
    "\n",
    "#sns.scatterplot(test_binarised['Internal Memory'],test_binarised['class'])\n",
    "#test_binarised['Internal Memory'].unique()\n",
    "#test_binarised['Internal Memory'] = test_binarised['Internal Memory'].map(lambda x: 0 if x < 16 else 1)\n",
    "\n",
    "X_binarised_test['Processor_frequency'] = round(X_binarised_test['Processor_frequency'],0)\n",
    "X_binarised_test['Processor_frequency'] = X_binarised_test['Processor_frequency'].map(lambda x: 0 if x < 2 else 1)\n",
    "\n",
    "\n",
    "X_binarised_test['Capacity'].unique()\n",
    "X_binarised_test['Capacity'] = round(X_binarised_test['Capacity'],-3)\n",
    "X_binarised_test['Capacity'] = X_binarised_test['Capacity'].map(lambda x: 0 if x < 3000 else 1)\n",
    "\n",
    "X_binarised_test.Brand[X_binarised_test.Brand == \"Motorola\"] = 'Moto'\n",
    "X_binarised_test.Brand[X_binarised_test.Brand == \"Xiaomi Poco\"] = 'Xiaomi'\n",
    "lst = ['Apple','Samsung','Vivo','OPPO','Xiaomi','Honor','Google','OnePlus']\n",
    "X_binarised_test['Brand'] = X_binarised_test['Brand'].map(lambda val: 1 if any(val in x  for x in lst) else 0)\n",
    "\n",
    "\n",
    "lst = ['Octa', 'Hexa','Tru-Octa']\n",
    "X_binarised_test['Num_cores'] = X_binarised_test['Num_cores'].map(lambda val: 1 if any(val in x  for x in lst) else 0)\n",
    "\n",
    "lst = [ 'iOS']\n",
    "X_binarised_test['os_name'] = X_binarised_test['os_name'].map(lambda val: 1 if any(val in x  for x in lst) else 0)\n",
    "\n",
    "#test_binarised['SIM Slot(s)'].unique()\n",
    "#lst = ['Single SIM, GSM']\n",
    "#test_binarised['SIM Slot(s)'] = test_binarised['SIM Slot(s)'].map(lambda val: 0 if any(val in x  for x in lst) else 1)\n",
    "\n",
    "X_binarised_test['Sim1'].unique()\n",
    "lst = ['4G']\n",
    "X_binarised_test['Sim1'] = X_binarised_test['Sim1'].map(lambda val: 1 if any(val in x  for x in lst) else 0)\n",
    "\n",
    "X_binarised_test['SIM 2'].unique()\n",
    "lst = ['4G','Other']\n",
    "X_binarised_test['SIM 2'] = X_binarised_test['SIM 2'].map(lambda val: 1 if any(val in x  for x in lst) else 0)\n",
    "\n",
    "\n",
    "#X_binarised_test = X_binarised_test.drop(['SIM 2'],axis=1)\n",
    "\n",
    "X_binarised_test = X_binarised_test.drop(['Internal Memory'],axis=1)\n",
    "\n",
    "X_binarised_test = X_binarised_test.drop(['Weight'],axis=1)\n",
    "\n",
    "X_binarised_test = X_binarised_test.drop(['Pixel Density'],axis=1)\n",
    "\n",
    "X_binarised_test = X_binarised_test.drop(['Height'],axis=1)\n",
    "\n",
    "X_binarised_test = X_binarised_test.drop(['Resolution'],axis=1)\n",
    "\n",
    "X_binarised_test = X_binarised_test.drop(['Screen to Body Ratio (calculated)'],axis=1)\n",
    "\n",
    "X_binarised_test = X_binarised_test.drop(['Rating'],axis=1)\n",
    "X_binarised_test = X_binarised_test.drop(['class'],axis=1)\n",
    "X_binarised_test = X_binarised_test.drop(['SIM Slot(s)'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "_uuid": "e162c5fde315d78706c8aad33c1b83fa2f439fb8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6285714285714286\n"
     ]
    }
   ],
   "source": [
    "X_binarised_test = X_binarised_test.loc[:,X_binarised_test.columns != 'PhoneId'].values\n",
    "Y_test_pred = mp_neuron.predict(X_binarised_test)\n",
    "accuracy_test = accuracy_score(Y_test_pred, Y_test)\n",
    "print(accuracy_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "_uuid": "90e50a73ec89c798bbf3ef2586ff5d5bed120bc1"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "_uuid": "8a786602393f6b75d6468da0d69c62a1cfb4f277"
   },
   "outputs": [],
   "source": [
    "X_binarised_final = test_new[:]\n",
    "\n",
    "\n",
    "X_binarised_final['RAM'] = X_binarised_final['RAM'].map(lambda x: 0 if x < 6 else 1)\n",
    "\n",
    "X_binarised_final['Screen Size'] = round(X_binarised_final['Screen Size'],0)\n",
    "X_binarised_final['Screen Size'] = X_binarised_final['Screen Size'].map(lambda x: 0 if x < 6 else 1)\n",
    "\n",
    "#sns.scatterplot(final_binarised['Internal Memory'],final_binarised['class'])\n",
    "#final_binarised['Internal Memory'].unique()\n",
    "#final_binarised['Internal Memory'] = final_binarised['Internal Memory'].map(lambda x: 0 if x < 16 else 1)\n",
    "\n",
    "X_binarised_final['Processor_frequency'] = round(X_binarised_final['Processor_frequency'],0)\n",
    "X_binarised_final['Processor_frequency'] = X_binarised_final['Processor_frequency'].map(lambda x: 0 if x < 2 else 1)\n",
    "\n",
    "\n",
    "X_binarised_final['Capacity'].unique()\n",
    "X_binarised_final['Capacity'] = round(X_binarised_final['Capacity'],-3)\n",
    "X_binarised_final['Capacity'] = X_binarised_final['Capacity'].map(lambda x: 0 if x < 3000 else 1)\n",
    "\n",
    "X_binarised_final.Brand[X_binarised_final.Brand == \"Motorola\"] = 'Moto'\n",
    "X_binarised_final.Brand[X_binarised_final.Brand == \"Xiaomi Poco\"] = 'Xiaomi'\n",
    "lst = ['Apple','Samsung','Vivo','OPPO','Xiaomi','Honor','Google','OnePlus']\n",
    "X_binarised_final['Brand'] = X_binarised_final['Brand'].map(lambda val: 1 if any(val in x  for x in lst) else 0)\n",
    "\n",
    "\n",
    "lst = ['Octa', 'Hexa','Tru-Octa']\n",
    "X_binarised_final['Num_cores'] = X_binarised_final['Num_cores'].map(lambda val: 1 if any(val in x  for x in lst) else 0)\n",
    "\n",
    "lst = [ 'iOS']\n",
    "X_binarised_final['os_name'] = X_binarised_final['os_name'].map(lambda val: 1 if any(val in x  for x in lst) else 0)\n",
    "\n",
    "#final_binarised['SIM Slot(s)'].unique()\n",
    "#lst = ['Single SIM, GSM']\n",
    "#final_binarised['SIM Slot(s)'] = final_binarised['SIM Slot(s)'].map(lambda val: 0 if any(val in x  for x in lst) else 1)\n",
    "\n",
    "X_binarised_final['Sim1'].unique()\n",
    "lst = ['4G']\n",
    "X_binarised_final['Sim1'] = X_binarised_final['Sim1'].map(lambda val: 1 if any(val in x  for x in lst) else 0)\n",
    "\n",
    "X_binarised_final['SIM 2'].unique()\n",
    "lst = ['4G','Other']\n",
    "X_binarised_final['SIM 2'] = X_binarised_final['SIM 2'].map(lambda val: 1 if any(val in x  for x in lst) else 0)\n",
    "\n",
    "\n",
    "#X_binarised_final = X_binarised_final.drop(['SIM 2'],axis=1)\n",
    "\n",
    "X_binarised_final = X_binarised_final.drop(['Internal Memory'],axis=1)\n",
    "\n",
    "X_binarised_final = X_binarised_final.drop(['Weight'],axis=1)\n",
    "\n",
    "X_binarised_final = X_binarised_final.drop(['Pixel Density'],axis=1)\n",
    "\n",
    "X_binarised_final = X_binarised_final.drop(['Height'],axis=1)\n",
    "\n",
    "X_binarised_final = X_binarised_final.drop(['Resolution'],axis=1)\n",
    "\n",
    "X_binarised_final = X_binarised_final.drop(['Screen to Body Ratio (calculated)'],axis=1)\n",
    "\n",
    "X_binarised_final = X_binarised_final.drop(['SIM Slot(s)'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "_uuid": "0b7aa24d9ed69a609f718c7d63e7cea056a05973"
   },
   "outputs": [],
   "source": [
    "X_binarised_final = X_binarised_final.loc[:,X_binarised_final.columns != 'PhoneId'].values\n",
    "Y_test_pred = mp_neuron.predict(X_binarised_final)\n",
    "result = Y_test_pred.astype(int)\n",
    "test_new['Class'] = result\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "_uuid": "890250beb8fbff76ebb0e82c27a1c9f7edc3840d"
   },
   "outputs": [],
   "source": [
    "submission = test_new[['PhoneId', 'Class']]\n",
    "submission.to_csv(\"Results.csv\", index=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
